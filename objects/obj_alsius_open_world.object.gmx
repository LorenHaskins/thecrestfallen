<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_al_idle_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0;
hsp = 0;
vsp = 0;
movespeed = 2;
run_spd = 2;

//Initialize all movement sprites
spr_run_right = spr_al_walk_right;
spr_walk_right = spr_al_walk_right;
spr_idle_right = spr_al_idle_right;
spr_run_left = spr_al_walk_left;
spr_walk_left = spr_al_walk_left;
spr_idle_left = spr_al_idle_left;
sprite_index = spr_idle_right;
image_speed = 0.08;

///Depth
depth = player_depth;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Character Movement

//Player Input

key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);

//React to inputs
move = key_left + key_right;

if (keyboard_check(vk_lshift)) 
{
    hsp = move * (movespeed + bg_mvmt) * run_spd;
} 
else 
{
    hsp = move * (movespeed + bg_mvmt);
}

//Horiz Collision
if (place_meeting(x + hsp, y, obj_wall_objects))
{
    while(!place_meeting(x + sign(hsp), y, obj_wall_objects))
    {
        x += sign(hsp);        
    }
    hsp=0;
}
x += hsp;

//Tell the background when to move
player_mov = hsp
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Control

//When Running
if keyboard_check(vk_lshift)
{
    if ( hsp &gt;= movespeed ) 
    {
        sprite_index = spr_run_right;
    } 
    else if ( hsp &lt;= -movespeed )
    {
        sprite_index = spr_run_left;
    } 
    else if ( hsp = 0 )
    {
        if ( move = 1 )
        {
            sprite_index = spr_idle_right;
        }
        else if ( move = -1 )
        {
            sprite_index = spr_idle_left;
        }
    }
}


//When Walking
if ( hsp &gt; 0 ) 
{
    sprite_index = spr_walk_right;
} 
else if ( hsp &lt; 0 )
{
    sprite_index = spr_walk_left;
} 
else if ( hsp = 0 )
{
    if ( move = 1 )
    {
        sprite_index = spr_idle_right;
    }
    else if ( move = -1 )
    {
        sprite_index = spr_idle_left;
    }
}
        
//Upon Key Release
if keyboard_check_released(vk_right)
{
    sprite_index = spr_idle_right;
}

if keyboard_check_released(vk_left)
{
    sprite_index = spr_idle_left;
}

//Mashke
if keyboard_check(vk_right) 
{
    if keyboard_check(vk_left)
    {
        sprite_index = spr_idle_right;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Getting Attacked

// Add in all scripts pertaining to Alsius under Enemy Collision.

script_execute(scr_en_beta_zombie)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
