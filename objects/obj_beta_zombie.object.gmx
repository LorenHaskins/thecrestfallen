<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_beta_zombie</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

grav = 0;
hsp = 0;
vsp = 0;

///Depth
depth = -1101;

//states
aggro_state = aggro_states.idle;
patrol_dist = p_dist.d_mid;

//state variables
patrol_speed = 1;
patrol_dist_max = 20;
patrol_dist_min = -20;
patrol_dist_mid = 0;
cur_patrol_dist = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Aggro states of the enemy. *MUST BE MADE FOR EACH PLAYABLE CHARACTER, AND EACH ENEMY TYPE*
//Zombie Aggro
switch (aggro_state)
{
    case aggro_states.idle:
    {
        // hsp = 0;
        script_execute(scr_patrol_timer) //Need to fix this script
        if (distance_to_object(Alsius) &lt; 200) 
        {
            aggro_state = aggro_states.chase;
        }
        break;
    }
    /*
    case aggro_states.chase:
    {
        dir = sign(Alsius.x - x);
        hsp = dir * 2;
        if (distance_to_object(Alsius) &lt; 300) 
        {
            aggro_state = aggro_states.idle
        }  
        break;
    }
    */
}

x += ( hsp + move_all )
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
