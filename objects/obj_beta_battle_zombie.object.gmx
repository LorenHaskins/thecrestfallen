<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_beta_zombie_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

grav = 0;
hsp = 0;
vsp = 0;
attacker_icon = 0;
attacker_gui = 0;
attack_name = 0;
defender_roll = 0;
defend_d_20 = 0;
def_roll = 0;
agi_roll = 0;
enemy_battle_move = 0;


//Define Battle Sprites
full_health = spr_beta_zombie_full_hp;
injured = spr_beta_zombie_injured;
dead = spr_beta_zombie_dead;

///Depth
depth = -1101;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy Stats
level = 1; //Current Level

xp_worth = 1

max_hp = 50; //Maximum Health Points
cur_hp = 5; //Current Health Points
cqc = 1; //Strength Stat
aim = 1; //Dexterity Stat
def = 1; //Defense
agi = 1; //Agility
fear = 0;
spd = 5; //Battle Speed

attack_chance = 90;
defend_chance = 4;
special_chance = 1;
run_chance = 0;
do_nothing_chance = 5;

move_decide_attack = attack_chance * sign(attack_chance);
move_decide_defend = (move_decide_attack + defend_chance) * sign(defend_chance);
move_decide_special = (move_decide_defend + special_chance) * sign(special_chance);
move_decide_run = (move_decide_special + run_chance) * sign(run_chance);
move_decide_do_nothing = (move_decide_run + do_nothing_chance) * sign(do_nothing_chance);

cqc_decide = 45 //Must be less than attack_chance, will cause aim to be opposite to fulfull 50


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Battle Sprite
battle_icon = obj_battle_icon_beta_zombie
battle_icon_x = 0;

battle_icon_spr_width = sprite_get_width(object_get_sprite(battle_icon))
battle_icon_spr_height = sprite_get_height(object_get_sprite(battle_icon))

//If room transition is red, he gets a preemptive strike
if ( fade_color = c_red )
{
    battle_icon_x = obj_battle_timer.x+(sprite_get_width(obj_battle_timer)/4);
}
else
{
    battle_icon_x = obj_battle_timer.x-(sprite_get_width(spr_battle_timer)/2)+(battle_icon_spr_width/2);
}

instance_create(battle_icon_x,obj_battle_timer.y-(sprite_get_height(spr_battle_timer)/2)+(battle_icon_spr_height/2),battle_icon)


battle_icon.initiative = spd
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Control

//Full HP
if (cur_hp &gt;= (max_hp/2))
{
    sprite_index = full_health;
}

//Half HP
if (cur_hp &lt;= (max_hp/2))
{
    if (cur_hp &gt; 0 )
    {
    sprite_index = injured;
    }
}

//Dead
if (cur_hp &lt;= 0)
{
    sprite_index = dead;
    instance_deactivate_object(battle_icon)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack!!
if ( cur_hp &gt; 0 )
{

    if ( battle_icon.turn = true )
    {
         //Choose Defender between 1 and the amount of party_members)
        choose_defender = irandom_range(1,party_members);
        if ( choose_defender == 1 )
        {
            defender = party_member_a;
        }
    
        if (choose_defender == 2 )
        {
            defender = party_member_b;
        }
    
        if (choose_defender == 3 )
        {
            defender = party_member_c;
        }
        
    //This is how the enemy will choose their attack. This script is dependant on create_init_variables
        enemy_battle_move = irandom_range(1,100);
        //The enemy will attack
        if ( enemy_battle_move &lt;= move_decide_attack )
        {
            //The enemy will use a CQC attack
            if ( enemy_battle_move &lt;= cqc_decide )
            {
                damage_type = cqc
                script_execute(damage_roll_vs_player);
            }
            //The enemy will use a AIM attack
            else
            {
                damage_type = aim
                script_execute(damage_roll_vs_player);
            }
        }
        //The enemy will defend
        if ( enemy_battle_move &lt;= move_decide_defend &amp;&amp; enemy_battle_move &gt; move_decide_attack )
        {
            def += 1;
        }
        //The enemy will use special attack
        if ( enemy_battle_move &lt;= move_decide_special &amp;&amp; enemy_battle_move &gt; move_decide_defend )
        {
            cur_hp += 5;
        }
        
        //The enemy will attempt to Run
        if ( enemy_battle_move &lt;= move_decide_run &amp;&amp; enemy_battle_move &gt; move_decide_special )
        {
            defender.cur_hp += 1000;
        }
        
        if ( enemy_battle_move &lt;= move_decide_do_nothing &amp;&amp; enemy_battle_move &gt; move_decide_run )
        {
            cur_hp += 0;
        }
        
        //After Attack
        battle_icon.x += (-(sprite_get_width(spr_battle_timer)-(sprite_get_width(spr_battle_icon_alsius)))) //Resets Battle Timer to 0
        stop_time = false //Turns timer back on
        battle_icon.turn = false;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Getting Attacked
defend_d_20 = irandom_range(1,20);
def_roll = defend_d_20+round(level/2)+def;
agi_roll = defend_d_20+round(level/2)+agi;
//Must be applied to every single enemy

//When Alsius Uses Slash Attack (In this case, Alsius is the "attacker"
//Must create a sequence for every single attack in the game.
if ( bm_alsius_slash.button_state = 1 )
{
    if ( stop_time = true )
    {
    attacker_icon = obj_alsius_battle_icon //Name the attackers battle icon
    attacker_gui = bm_alsius_gui_bg //Name the gui_bg of the attacker
    attack_name = bm_alsius_slash //Name of the attack
    defender_roll = def_roll
    attacker_icon.x += (-(sprite_get_width(spr_battle_timer)-(sprite_get_width(spr_battle_icon_alsius)))) //Resets Battle Timer to 0
    stop_time = false //Turns timer back on
    attacker_icon.turn = 0;
    attack_name.button_state = 0; //Resets Variable
    attacker_icon = 0; //Resets Variable
    attacker_gui = 0; //Resets Variable
    
    //Put Damage Script Here  
    script_execute(damage_rolls)
    }
}

if ( bm_alsius_shoot.button_state = 1 )
{
    if ( stop_time = true )
    {
    attacker_icon = obj_alsius_battle_icon //Name the attackers battle icon
    attacker_gui = bm_alsius_gui_bg //Name the gui_bg of the attacker
    attack_name = bm_alsius_shoot //Name of the attack
    defender_roll = def_roll
    attacker_icon.x += (-(sprite_get_width(spr_battle_timer)-(sprite_get_width(spr_battle_icon_alsius)))) //Resets Battle Timer to 0
    stop_time = false //Turns timer back on
    attacker_icon.turn = 0;
    attack_name.button_state = 0; //Resets Variable
    attacker_icon = 0; //Resets Variable
    attacker_gui = 0; //Resets Variable
    
    //Put Damage Script Here  
    script_execute(damage_rolls)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_text(x-200,y,"HP : "+string(cur_hp))
draw_text(x-200,y+16,"D20 : "+string(defend_d_20))
draw_text(x-200,y+32,"DEFROLL : "+string(def_roll))
draw_text(x-200,y+48,"AGIROLL : "+string(agi_roll))
draw_text(x-200,y+64,"BATLE MOVE : "+string(enemy_battle_move))

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
